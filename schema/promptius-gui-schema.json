{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/AgentBossMode/promptius-gui/schema/promptius-gui-schema.json",
  "title": "Promptius GUI Schema",
  "description": "Type-safe UI schema definitions for cross-platform UI generation using graph-based structure. This schema defines UI components as nodes in a graph, connected by edges to form a hierarchical component tree. The rootId in metadata specifies which node serves as the root of the component tree and MUST exist as an id in the nodes array.",
  "version": "2.0.0",
  "type": "object",
  "properties": {
    "metadata": {
      "$ref": "#/$defs/UIMetadata"
    },
    "nodes": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/Node"
      },
      "minItems": 1,
      "description": "Array of all UI component nodes. Each node represents a UI component (button, input, container, etc.) with a unique id. The rootId specified in metadata.rootId MUST exist as one of these node ids."
    },
    "edges": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/Edge"
      },
      "description": "Array of edges defining parent-child relationships in the component tree. Each edge connects a parent node (src) to a child node (dest) and specifies the rendering order (order). Edges define the hierarchical structure: nodes without incoming edges are top-level, and children are nested within their parent components. If a node has no edges pointing to it, it is an orphan and won't be rendered unless it's the root node."
    },
    "events": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/Event"
      },
      "description": "Array of event bindings that connect user interactions (onClick, onSubmit, onChange, etc.) to specific nodes. Each event specifies the nodeId (which MUST exist in the nodes array), the eventType, and the action to perform when the event is triggered."
    }
  },
  "required": ["metadata", "nodes", "edges", "events"],
  "additionalProperties": false,
  "$defs": {
    "ButtonVariant": {
      "type": "string",
      "enum": ["primary", "secondary", "outline", "ghost", "destructive"],
      "description": "Button visual variant"
    },
    "ButtonSize": {
      "type": "string",
      "enum": ["sm", "md", "lg"],
      "description": "Button size variant"
    },
    "InputType": {
      "type": "string",
      "enum": ["text", "email", "password", "number", "tel", "url", "search", "date"],
      "description": "HTML input type"
    },
    "InputSize": {
      "type": "string",
      "enum": ["sm", "md", "lg"],
      "description": "Input size variant"
    },
    "AlertVariant": {
      "type": "string",
      "enum": ["info", "success", "warning", "error"],
      "description": "Alert visual variant"
    },
    "TextTag": {
      "type": "string",
      "enum": ["h1", "h2", "h3", "h4", "h5", "h6", "p", "span", "label"],
      "description": "HTML tag for text component"
    },
    "AlignText": {
      "type": "string",
      "enum": ["left", "center", "right", "justify"],
      "description": "Text alignment"
    },
    "FlexDirection": {
      "type": "string",
      "enum": ["row", "column"],
      "description": "Flexbox direction"
    },
    "ChartType": {
      "type": "string",
      "enum": ["bar", "line", "pie"],
      "description": "Chart visualization type"
    },
    "EventType": {
      "type": "string",
      "enum": ["onClick", "onSubmit", "onChange", "onFocus", "onBlur"],
      "description": "Event handler type"
    },
    "NavigateAction": {
      "type": "object",
      "properties": {
        "type": {
          "const": "navigate"
        },
        "url": {
          "type": "string",
          "minLength": 1,
          "description": "URL or route to navigate to"
        },
        "target": {
          "type": "string",
          "enum": ["_self", "_blank"],
          "default": "_self",
          "description": "Navigation target window"
        }
      },
      "required": ["type", "url"],
      "additionalProperties": false,
      "description": "Navigate to a URL or route"
    },
    "SetStateAction": {
      "type": "object",
      "properties": {
        "type": {
          "const": "setState"
        },
        "key": {
          "type": "string",
          "minLength": 1,
          "description": "State key to update"
        },
        "value": {
          "oneOf": [
            {"type": "string"},
            {"type": "number"},
            {"type": "boolean"}
          ],
          "description": "Value to set"
        }
      },
      "required": ["type", "key", "value"],
      "additionalProperties": false,
      "description": "Update component state"
    },
    "SubmitFormAction": {
      "type": "object",
      "properties": {
        "type": {
          "const": "submitForm"
        },
        "endpoint": {
          "type": "string",
          "description": "API endpoint to submit to"
        },
        "method": {
          "type": "string",
          "enum": ["POST", "PUT", "PATCH"],
          "default": "POST",
          "description": "HTTP method for form submission"
        }
      },
      "required": ["type"],
      "additionalProperties": false,
      "description": "Submit form data"
    },
    "ValidateAction": {
      "type": "object",
      "properties": {
        "type": {
          "const": "validate"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Validation rules"
        }
      },
      "required": ["type"],
      "additionalProperties": false,
      "description": "Validate form or input"
    },
    "CustomAction": {
      "type": "object",
      "properties": {
        "type": {
          "const": "custom"
        },
        "handler": {
          "type": "string",
          "minLength": 1,
          "description": "Name of custom handler function"
        }
      },
      "required": ["type", "handler"],
      "additionalProperties": false,
      "description": "Custom handler reference"
    },
    "EventAction": {
      "oneOf": [
        {"$ref": "#/$defs/NavigateAction"},
        {"$ref": "#/$defs/SetStateAction"},
        {"$ref": "#/$defs/SubmitFormAction"},
        {"$ref": "#/$defs/ValidateAction"},
        {"$ref": "#/$defs/CustomAction"}
      ],
      "discriminator": {
        "propertyName": "type"
      }
    },
    "ButtonProps": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "minLength": 1,
          "description": "Button text"
        },
        "variant": {
          "$ref": "#/$defs/ButtonVariant",
          "default": "primary"
        },
        "size": {
          "$ref": "#/$defs/ButtonSize",
          "default": "md"
        },
        "disabled": {
          "type": "boolean",
          "default": false
        },
        "fullWidth": {
          "type": "boolean",
          "default": false
        },
        "loading": {
          "type": "boolean",
          "default": false
        }
      },
      "required": ["label"],
      "additionalProperties": false,
      "description": "Type-safe props for Button component"
    },
    "InputProps": {
      "type": "object",
      "properties": {
        "placeholder": {
          "type": "string",
          "default": "",
          "description": "Placeholder text"
        },
        "type": {
          "$ref": "#/$defs/InputType",
          "default": "text"
        },
        "size": {
          "$ref": "#/$defs/InputSize",
          "default": "md"
        },
        "disabled": {
          "type": "boolean",
          "default": false
        },
        "required": {
          "type": "boolean",
          "default": false
        },
        "label": {
          "type": "string",
          "description": "Input label"
        },
        "helperText": {
          "type": "string",
          "description": "Helper text below input"
        },
        "defaultValue": {
          "type": "string",
          "description": "Default input value"
        },
        "maxLength": {
          "type": "integer",
          "minimum": 1,
          "description": "Maximum input length"
        },
        "minLength": {
          "type": "integer",
          "minimum": 0,
          "description": "Minimum input length"
        }
      },
      "additionalProperties": false,
      "description": "Type-safe props for Input component"
    },
    "TextareaProps": {
      "type": "object",
      "properties": {
        "placeholder": {
          "type": "string",
          "default": "",
          "description": "Placeholder text"
        },
        "rows": {
          "type": "integer",
          "minimum": 1,
          "maximum": 20,
          "default": 4,
          "description": "Number of textarea rows"
        },
        "disabled": {
          "type": "boolean",
          "default": false
        },
        "required": {
          "type": "boolean",
          "default": false
        },
        "label": {
          "type": "string",
          "description": "Textarea label"
        },
        "helperText": {
          "type": "string",
          "description": "Helper text below textarea"
        },
        "maxLength": {
          "type": "integer",
          "minimum": 1,
          "description": "Maximum textarea length"
        }
      },
      "additionalProperties": false,
      "description": "Type-safe props for Textarea component"
    },
    "TextProps": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "Text content"
        },
        "tag": {
          "$ref": "#/$defs/TextTag",
          "default": "p"
        },
        "align": {
          "$ref": "#/$defs/AlignText",
          "default": "left"
        },
        "bold": {
          "type": "boolean",
          "default": false
        },
        "italic": {
          "type": "boolean",
          "default": false
        },
        "color": {
          "type": "string",
          "pattern": "^(#[0-9A-Fa-f]{6}|[a-z\\-]+)$",
          "description": "Text color (hex or CSS color name)"
        }
      },
      "required": ["content"],
      "additionalProperties": false,
      "description": "Type-safe props for Text component"
    },
    "CardProps": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Card title"
        },
        "description": {
          "type": "string",
          "description": "Card description"
        },
        "elevation": {
          "type": "integer",
          "minimum": 0,
          "maximum": 5,
          "default": 1,
          "description": "Card elevation level"
        },
        "padding": {
          "type": "integer",
          "minimum": 0,
          "maximum": 64,
          "default": 16,
          "description": "Card padding in pixels"
        }
      },
      "additionalProperties": false,
      "description": "Type-safe props for Card component"
    },
    "AlertProps": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "minLength": 1,
          "description": "Alert message"
        },
        "title": {
          "type": "string",
          "description": "Alert title"
        },
        "variant": {
          "$ref": "#/$defs/AlertVariant",
          "default": "info"
        },
        "dismissible": {
          "type": "boolean",
          "default": false
        }
      },
      "required": ["message"],
      "additionalProperties": false,
      "description": "Type-safe props for Alert component"
    },
    "ContainerProps": {
      "type": "object",
      "properties": {
        "maxWidth": {
          "type": "integer",
          "minimum": 320,
          "maximum": 1920,
          "description": "Maximum container width in pixels"
        },
        "padding": {
          "type": "integer",
          "minimum": 0,
          "maximum": 64,
          "default": 16,
          "description": "Container padding in pixels"
        },
        "centered": {
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false,
      "description": "Type-safe props for Container component"
    },
    "GridProps": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "integer",
          "minimum": 1,
          "maximum": 12,
          "default": 1,
          "description": "Number of columns"
        },
        "gap": {
          "type": "integer",
          "minimum": 0,
          "maximum": 64,
          "default": 16,
          "description": "Gap between items in pixels"
        },
        "responsive": {
          "type": "boolean",
          "default": true,
          "description": "Enable responsive behavior"
        }
      },
      "required": ["columns"],
      "additionalProperties": false,
      "description": "Type-safe props for Grid layout"
    },
    "StackProps": {
      "type": "object",
      "properties": {
        "direction": {
          "$ref": "#/$defs/FlexDirection",
          "default": "column"
        },
        "gap": {
          "type": "integer",
          "minimum": 0,
          "maximum": 64,
          "default": 8,
          "description": "Gap between items in pixels"
        },
        "align": {
          "type": "string",
          "enum": ["start", "center", "end", "stretch"],
          "default": "stretch",
          "description": "Alignment of items"
        }
      },
      "additionalProperties": false,
      "description": "Type-safe props for Stack layout"
    },
    "ChartSeries": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Series name"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "minItems": 1,
          "description": "Series data points"
        }
      },
      "required": ["data"],
      "additionalProperties": false,
      "description": "Chart data series"
    },
    "AxisXProps": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "X-axis label"
        },
        "ticks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "X-axis tick labels"
        },
        "showGrid": {
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false,
      "description": "X-axis configuration"
    },
    "AxisYProps": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "Y-axis label"
        },
        "min": {
          "type": "number",
          "description": "Y-axis minimum value"
        },
        "max": {
          "type": "number",
          "description": "Y-axis maximum value"
        },
        "showGrid": {
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false,
      "description": "Y-axis configuration"
    },
    "ChartAnnotation": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "description": "X coordinate"
        },
        "y": {
          "type": "number",
          "description": "Y coordinate"
        },
        "label": {
          "type": "string",
          "description": "Annotation label"
        }
      },
      "required": ["label"],
      "additionalProperties": false,
      "description": "Chart annotation"
    },
    "ChartProps": {
      "type": "object",
      "properties": {
        "chartType": {
          "$ref": "#/$defs/ChartType",
          "description": "Chart visualization type"
        },
        "width": {
          "type": "integer",
          "minimum": 100,
          "maximum": 4000,
          "description": "Chart width in pixels"
        },
        "height": {
          "type": "integer",
          "minimum": 100,
          "maximum": 4000,
          "description": "Chart height in pixels"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Chart category labels"
        },
        "series": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ChartSeries"
          },
          "minItems": 1,
          "description": "Chart data series"
        },
        "colors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Custom chart colors"
        },
        "title": {
          "type": "string",
          "description": "Chart title"
        },
        "showLegend": {
          "type": "boolean",
          "default": true
        },
        "legendPosition": {
          "type": "string",
          "enum": ["top", "right", "bottom", "left"],
          "default": "top"
        },
        "xAxis": {
          "$ref": "#/$defs/AxisXProps"
        },
        "yAxis": {
          "$ref": "#/$defs/AxisYProps"
        },
        "annotations": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ChartAnnotation"
          },
          "description": "Chart annotations"
        }
      },
      "required": ["chartType", "series"],
      "additionalProperties": false,
      "description": "Type-safe props for Chart component"
    },
    "ButtonNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Unique node identifier. This id must be unique across all nodes in the nodes array. It is used to reference this node in edges (as src or dest) and events (as nodeId). The rootId in metadata must match one of these ids."
        },
        "type": {
          "const": "button"
        },
        "props": {
          "$ref": "#/$defs/ButtonProps"
        }
      },
      "required": ["id", "type", "props"],
      "additionalProperties": false,
      "description": "Button node"
    },
    "InputNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Unique node identifier. This id must be unique across all nodes in the nodes array. It is used to reference this node in edges (as src or dest) and events (as nodeId). The rootId in metadata must match one of these ids."
        },
        "type": {
          "const": "input"
        },
        "props": {
          "$ref": "#/$defs/InputProps"
        }
      },
      "required": ["id", "type", "props"],
      "additionalProperties": false,
      "description": "Input node"
    },
    "TextareaNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Unique node identifier. This id must be unique across all nodes in the nodes array. It is used to reference this node in edges (as src or dest) and events (as nodeId). The rootId in metadata must match one of these ids."
        },
        "type": {
          "const": "textarea"
        },
        "props": {
          "$ref": "#/$defs/TextareaProps"
        }
      },
      "required": ["id", "type", "props"],
      "additionalProperties": false,
      "description": "Textarea node"
    },
    "TextNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Unique node identifier. This id must be unique across all nodes in the nodes array. It is used to reference this node in edges (as src or dest) and events (as nodeId). The rootId in metadata must match one of these ids."
        },
        "type": {
          "const": "text"
        },
        "props": {
          "$ref": "#/$defs/TextProps"
        }
      },
      "required": ["id", "type", "props"],
      "additionalProperties": false,
      "description": "Text node"
    },
    "CardNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Unique node identifier. This id must be unique across all nodes in the nodes array. It is used to reference this node in edges (as src or dest) and events (as nodeId). The rootId in metadata must match one of these ids."
        },
        "type": {
          "const": "card"
        },
        "props": {
          "$ref": "#/$defs/CardProps"
        }
      },
      "required": ["id", "type", "props"],
      "additionalProperties": false,
      "description": "Card node"
    },
    "AlertNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Unique node identifier. This id must be unique across all nodes in the nodes array. It is used to reference this node in edges (as src or dest) and events (as nodeId). The rootId in metadata must match one of these ids."
        },
        "type": {
          "const": "alert"
        },
        "props": {
          "$ref": "#/$defs/AlertProps"
        }
      },
      "required": ["id", "type", "props"],
      "additionalProperties": false,
      "description": "Alert node"
    },
    "ContainerNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Unique node identifier. This id must be unique across all nodes in the nodes array. It is used to reference this node in edges (as src or dest) and events (as nodeId). The rootId in metadata must match one of these ids."
        },
        "type": {
          "const": "container"
        },
        "props": {
          "$ref": "#/$defs/ContainerProps"
        }
      },
      "required": ["id", "type", "props"],
      "additionalProperties": false,
      "description": "Container node"
    },
    "GridNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Unique node identifier. This id must be unique across all nodes in the nodes array. It is used to reference this node in edges (as src or dest) and events (as nodeId). The rootId in metadata must match one of these ids."
        },
        "type": {
          "const": "grid"
        },
        "props": {
          "$ref": "#/$defs/GridProps"
        }
      },
      "required": ["id", "type", "props"],
      "additionalProperties": false,
      "description": "Grid node"
    },
    "StackNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Unique node identifier. This id must be unique across all nodes in the nodes array. It is used to reference this node in edges (as src or dest) and events (as nodeId). The rootId in metadata must match one of these ids."
        },
        "type": {
          "const": "stack"
        },
        "props": {
          "$ref": "#/$defs/StackProps"
        }
      },
      "required": ["id", "type", "props"],
      "additionalProperties": false,
      "description": "Stack node"
    },
    "ChartNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Unique node identifier. This id must be unique across all nodes in the nodes array. It is used to reference this node in edges (as src or dest) and events (as nodeId). The rootId in metadata must match one of these ids."
        },
        "type": {
          "const": "chart"
        },
        "props": {
          "$ref": "#/$defs/ChartProps"
        }
      },
      "required": ["id", "type", "props"],
      "additionalProperties": false,
      "description": "Chart node"
    },
    "Node": {
      "oneOf": [
        {"$ref": "#/$defs/ButtonNode"},
        {"$ref": "#/$defs/InputNode"},
        {"$ref": "#/$defs/TextareaNode"},
        {"$ref": "#/$defs/TextNode"},
        {"$ref": "#/$defs/CardNode"},
        {"$ref": "#/$defs/AlertNode"},
        {"$ref": "#/$defs/ContainerNode"},
        {"$ref": "#/$defs/GridNode"},
        {"$ref": "#/$defs/StackNode"},
        {"$ref": "#/$defs/ChartNode"}
      ],
      "discriminator": {
        "propertyName": "type"
      },
      "description": "A UI component node with a unique id (must be unique across all nodes), a type that determines the component type (button, input, container, etc.), and props that define the component's properties and behavior. Each node's id may be referenced by edges (as src or dest) and events (as nodeId)."
    },
        "Edge": {
          "type": "object",
          "properties": {
            "src": {
              "type": "string",
              "minLength": 1,
              "description": "The ID of the parent node. This MUST match the id of a node in the nodes array. The parent node will contain this child as a nested component."
            },
            "dest": {
              "type": "string",
              "minLength": 1,
              "description": "The ID of the child node. This MUST match the id of a node in the nodes array. This child will be rendered inside the parent node (src)."
            },
            "order": {
              "type": "integer",
              "minimum": 0,
              "description": "The rendering order among sibling children. Lower numbers are rendered first. If multiple edges have the same parent (src), their children will be rendered in ascending order of this value."
            }
          },
          "required": ["src", "dest", "order"],
          "additionalProperties": false,
          "description": "Defines a parent-child relationship in the component tree. The src node will contain the dest node as a child, and the order determines the position relative to other children of the same parent."
        },
    "Event": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "minLength": 1,
          "description": "The ID of the node to bind this event to. This MUST match the id of a node in the nodes array. When the specified eventType occurs on this node, the associated action will be executed."
        },
        "eventType": {
          "$ref": "#/$defs/EventType"
        },
        "action": {
          "$ref": "#/$defs/EventAction"
        }
      },
      "required": ["nodeId", "eventType", "action"],
      "additionalProperties": false,
      "description": "Binds a user interaction event to a specific node and defines the action to execute when the event occurs. The nodeId must reference a valid node, and the eventType specifies which interaction triggers this event (e.g., onClick, onSubmit, onChange)."
    },
    "UIMetadata": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "description": "UI schema title"
        },
        "description": {
          "type": "string",
          "description": "UI schema description"
        },
        "version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+\\.\\d+$",
          "default": "1.0.0",
          "description": "Schema version"
        },
        "framework": {
          "type": "string",
          "enum": ["shadcn", "material-ui", "chakra-ui", "ant-design"],
          "default": "shadcn",
          "description": "Target UI framework"
        },
        "rootId": {
          "type": "string",
          "minLength": 1,
          "description": "The ID of the root node that serves as the entry point for rendering the UI tree. This value MUST match the id field of exactly one node in the nodes array. The renderer will start building the UI hierarchy from this root node and traverse the edges to render child components in the specified order."
        }
      },
      "required": ["title", "rootId"],
      "additionalProperties": false,
      "description": "Metadata for the UI schema including title, description, version, target framework, and most importantly rootId which specifies which node serves as the root of the component tree. The rootId MUST exist in the nodes array."
    }
  }
}
