# generated by datamodel-codegen:
#   filename:  promptius-gui-schema.json
#   timestamp: 2025-10-26T08:47:09+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class ButtonVariant(Enum):
    primary = 'primary'
    secondary = 'secondary'
    outline = 'outline'
    ghost = 'ghost'
    destructive = 'destructive'


class ButtonSize(Enum):
    sm = 'sm'
    md = 'md'
    lg = 'lg'


class InputType(Enum):
    text = 'text'
    email = 'email'
    password = 'password'
    number = 'number'
    tel = 'tel'
    url = 'url'
    search = 'search'
    date = 'date'


class InputSize(Enum):
    sm = 'sm'
    md = 'md'
    lg = 'lg'


class AlertVariant(Enum):
    info = 'info'
    success = 'success'
    warning = 'warning'
    error = 'error'


class TextTag(Enum):
    h1 = 'h1'
    h2 = 'h2'
    h3 = 'h3'
    h4 = 'h4'
    h5 = 'h5'
    h6 = 'h6'
    p = 'p'
    span = 'span'
    label = 'label'


class AlignText(Enum):
    left = 'left'
    center = 'center'
    right = 'right'
    justify = 'justify'


class FlexDirection(Enum):
    row = 'row'
    column = 'column'


class ChartType(Enum):
    bar = 'bar'
    line = 'line'
    pie = 'pie'


class EventType(Enum):
    onClick = 'onClick'
    onSubmit = 'onSubmit'
    onChange = 'onChange'
    onFocus = 'onFocus'
    onBlur = 'onBlur'


class Target(Enum):
    field_self = '_self'
    field_blank = '_blank'


class NavigateAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['navigate']
    url: constr(min_length=1) = Field(..., description='URL or route to navigate to')
    target: Optional[Target] = Field('_self', description='Navigation target window')


class SetStateAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['setState']
    key: constr(min_length=1) = Field(..., description='State key to update')
    value: Union[str, float, bool] = Field(..., description='Value to set')


class Method(Enum):
    POST = 'POST'
    PUT = 'PUT'
    PATCH = 'PATCH'


class SubmitFormAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['submitForm']
    endpoint: Optional[str] = Field(None, description='API endpoint to submit to')
    method: Optional[Method] = Field(
        'POST', description='HTTP method for form submission'
    )


class ValidateAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['validate']
    rules: Optional[List[str]] = Field([], description='Validation rules')


class CustomAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['custom']
    handler: constr(min_length=1) = Field(
        ..., description='Name of custom handler function'
    )


EventAction = Union[
    NavigateAction,
    SetStateAction,
    SubmitFormAction,
    ValidateAction,
    CustomAction,
]


class ButtonProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    label: constr(min_length=1) = Field(..., description='Button text')
    variant: Optional[ButtonVariant] = 'primary'
    size: Optional[ButtonSize] = 'md'
    disabled: Optional[bool] = False
    fullWidth: Optional[bool] = False
    loading: Optional[bool] = False


class InputProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    placeholder: Optional[str] = Field('', description='Placeholder text')
    type: Optional[InputType] = 'text'
    size: Optional[InputSize] = 'md'
    disabled: Optional[bool] = False
    required: Optional[bool] = False
    label: Optional[str] = Field(None, description='Input label')
    helperText: Optional[str] = Field(None, description='Helper text below input')
    defaultValue: Optional[str] = Field(None, description='Default input value')
    maxLength: Optional[conint(ge=1)] = Field(None, description='Maximum input length')
    minLength: Optional[conint(ge=0)] = Field(None, description='Minimum input length')


class TextareaProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    placeholder: Optional[str] = Field('', description='Placeholder text')
    rows: Optional[conint(ge=1, le=20)] = Field(
        4, description='Number of textarea rows'
    )
    disabled: Optional[bool] = False
    required: Optional[bool] = False
    label: Optional[str] = Field(None, description='Textarea label')
    helperText: Optional[str] = Field(None, description='Helper text below textarea')
    maxLength: Optional[conint(ge=1)] = Field(
        None, description='Maximum textarea length'
    )


class TextProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: str = Field(..., description='Text content')
    tag: Optional[TextTag] = 'p'
    align: Optional[AlignText] = 'left'
    bold: Optional[bool] = False
    italic: Optional[bool] = False
    color: Optional[constr(pattern=r'^(#[0-9A-Fa-f]{6}|[a-z\-]+)$')] = Field(
        None, description='Text color (hex or CSS color name)'
    )


class CardProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    title: Optional[str] = Field(None, description='Card title')
    description: Optional[str] = Field(None, description='Card description')
    elevation: Optional[conint(ge=0, le=5)] = Field(
        1, description='Card elevation level'
    )
    padding: Optional[conint(ge=0, le=64)] = Field(
        16, description='Card padding in pixels'
    )


class AlertProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    message: constr(min_length=1) = Field(..., description='Alert message')
    title: Optional[str] = Field(None, description='Alert title')
    variant: Optional[AlertVariant] = 'info'
    dismissible: Optional[bool] = False


class ContainerProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    maxWidth: Optional[conint(ge=320, le=1920)] = Field(
        None, description='Maximum container width in pixels'
    )
    padding: Optional[conint(ge=0, le=64)] = Field(
        16, description='Container padding in pixels'
    )
    centered: Optional[bool] = False


class GridProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    columns: conint(ge=1, le=12) = Field(..., description='Number of columns')
    gap: Optional[conint(ge=0, le=64)] = Field(
        16, description='Gap between items in pixels'
    )
    responsive: Optional[bool] = Field(True, description='Enable responsive behavior')


class Align(Enum):
    start = 'start'
    center = 'center'
    end = 'end'
    stretch = 'stretch'


class StackProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    direction: Optional[FlexDirection] = 'column'
    gap: Optional[conint(ge=0, le=64)] = Field(
        8, description='Gap between items in pixels'
    )
    align: Optional[Align] = Field('stretch', description='Alignment of items')


class ChartSeries(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = Field(None, description='Series name')
    data: List[float] = Field(..., description='Series data points', min_length=1)


class AxisXProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    label: Optional[str] = Field(None, description='X-axis label')
    ticks: Optional[List[str]] = Field(None, description='X-axis tick labels')
    showGrid: Optional[bool] = False


class AxisYProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    label: Optional[str] = Field(None, description='Y-axis label')
    min: Optional[float] = Field(None, description='Y-axis minimum value')
    max: Optional[float] = Field(None, description='Y-axis maximum value')
    showGrid: Optional[bool] = False


class ChartAnnotation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    x: Optional[float] = Field(None, description='X coordinate')
    y: Optional[float] = Field(None, description='Y coordinate')
    label: str = Field(..., description='Annotation label')


class LegendPosition(Enum):
    top = 'top'
    right = 'right'
    bottom = 'bottom'
    left = 'left'


class ChartProps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    chartType: ChartType = Field(..., description='Chart visualization type')
    width: Optional[conint(ge=100, le=4000)] = Field(
        None, description='Chart width in pixels'
    )
    height: Optional[conint(ge=100, le=4000)] = Field(
        None, description='Chart height in pixels'
    )
    labels: Optional[List[str]] = Field(None, description='Chart category labels')
    series: List[ChartSeries] = Field(
        ..., description='Chart data series', min_length=1
    )
    colors: Optional[List[str]] = Field(None, description='Custom chart colors')
    title: Optional[str] = Field(None, description='Chart title')
    showLegend: Optional[bool] = True
    legendPosition: Optional[LegendPosition] = 'top'
    xAxis: Optional[AxisXProps] = None
    yAxis: Optional[AxisYProps] = None
    annotations: Optional[List[ChartAnnotation]] = Field(
        None, description='Chart annotations'
    )


class ButtonNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(min_length=1) = Field(..., description='Unique node identifier')
    type: Literal['button']
    props: ButtonProps


class InputNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(min_length=1) = Field(..., description='Unique node identifier')
    type: Literal['input']
    props: InputProps


class TextareaNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(min_length=1) = Field(..., description='Unique node identifier')
    type: Literal['textarea']
    props: TextareaProps


class TextNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(min_length=1) = Field(..., description='Unique node identifier')
    type: Literal['text']
    props: TextProps


class CardNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(min_length=1) = Field(..., description='Unique node identifier')
    type: Literal['card']
    props: CardProps


class AlertNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(min_length=1) = Field(..., description='Unique node identifier')
    type: Literal['alert']
    props: AlertProps


class ContainerNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(min_length=1) = Field(..., description='Unique node identifier')
    type: Literal['container']
    props: ContainerProps


class GridNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(min_length=1) = Field(..., description='Unique node identifier')
    type: Literal['grid']
    props: GridProps


class StackNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(min_length=1) = Field(..., description='Unique node identifier')
    type: Literal['stack']
    props: StackProps


class ChartNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: constr(min_length=1) = Field(..., description='Unique node identifier')
    type: Literal['chart']
    props: ChartProps


Node = Union[
    ButtonNode,
    InputNode,
    TextareaNode,
    TextNode,
    CardNode,
    AlertNode,
    ContainerNode,
    GridNode,
    StackNode,
    ChartNode,
]


class Edge(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    src: constr(min_length=1) = Field(..., description='Parent node ID')
    dest: constr(min_length=1) = Field(..., description='Child node ID')
    order: conint(ge=0) = Field(..., description='Rendering order among siblings')


class Event(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nodeId: constr(min_length=1) = Field(..., description='Node ID to bind event to')
    eventType: EventType
    action: EventAction


class Framework(Enum):
    shadcn = 'shadcn'
    material_ui = 'material-ui'
    chakra_ui = 'chakra-ui'
    ant_design = 'ant-design'


class UIMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    title: constr(min_length=1) = Field(..., description='UI schema title')
    description: Optional[str] = Field(None, description='UI schema description')
    version: Optional[constr(pattern=r'^\d+\.\d+\.\d+$')] = Field(
        '1.0.0', description='Schema version'
    )
    framework: Optional[Framework] = Field('shadcn', description='Target UI framework')
    rootId: constr(min_length=1) = Field(
        ..., description='ID of the root node to start rendering from'
    )


class PromptiusGuiSchema(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: UIMetadata
    nodes: List[Node] = Field(..., description='Array of UI component nodes')
    edges: Optional[List[Edge]] = Field(
        [], description='Array of parent-child relationships'
    )
    events: Optional[List[Event]] = Field([], description='Array of event bindings')
